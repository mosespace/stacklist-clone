// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  token                String?
  email                String    @unique
  emailVerified        DateTime?
  image                String?
  isMachine            Boolean   @default(false)
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  role                 UserRole  @default(USER)
  apiKey               String?
  
  // System
  lockedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()

  // Relations
  apiKeys      ApiKey[]
  stacks       Stack[]
  productCards ProductCard[]
  feedbacks    Feedback[]
  accounts     Account[]
  sessions     Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  createdAt  DateTime @default(now())
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Stack {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  description  String?
  isPublic     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productCards ProductCard[]

  @@index([userId])
}

model ProductCard {
  id          String   @id @default(cuid())
  name        String
  price       Float?
  link        String
  notes       String?
  aspectRatio String?
  imageUrl    String?
  showImage   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stackId     String?
  stack       Stack?   @relation(fields: [stackId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stackId])
}

model Feedback {
  id        String   @id @default(cuid())
  message   String?
  user      User     @relation(fields: [userId], references: [id]) // Defining a many-to-one relationship
  userId    String // Foreign key 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}
